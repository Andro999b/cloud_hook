// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library proto;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class ContentType {
  final int value;
  const ContentType._(this.value);

  factory ContentType.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ContentType');
    }
    return result;
  }

  static ContentType? _createOrNull(int? value) => 
      value == null ? null : ContentType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  static const ContentType Movie = ContentType._(0);
  static const ContentType Anime = ContentType._(1);
  static const ContentType Cartoon = ContentType._(2);
  static const ContentType Series = ContentType._(3);
  static const ContentType Manga = ContentType._(4);
  static const Map<int, ContentType> values = {
    0: Movie,
    1: Anime,
    2: Cartoon,
    3: Series,
    4: Manga};

  static const fb.Reader<ContentType> reader = _ContentTypeReader();

  @override
  String toString() {
    return 'ContentType{value: $value}';
  }
}

class _ContentTypeReader extends fb.Reader<ContentType> {
  const _ContentTypeReader();

  @override
  int get size => 1;

  @override
  ContentType read(fb.BufferContext bc, int offset) =>
      ContentType.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class MediaType {
  final int value;
  const MediaType._(this.value);

  factory MediaType.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum MediaType');
    }
    return result;
  }

  static MediaType? _createOrNull(int? value) => 
      value == null ? null : MediaType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  static const MediaType Video = MediaType._(0);
  static const MediaType Manga = MediaType._(1);
  static const Map<int, MediaType> values = {
    0: Video,
    1: Manga};

  static const fb.Reader<MediaType> reader = _MediaTypeReader();

  @override
  String toString() {
    return 'MediaType{value: $value}';
  }
}

class _MediaTypeReader extends fb.Reader<MediaType> {
  const _MediaTypeReader();

  @override
  int get size => 1;

  @override
  MediaType read(fb.BufferContext bc, int offset) =>
      MediaType.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class ContentMediaItemSourceType {
  final int value;
  const ContentMediaItemSourceType._(this.value);

  factory ContentMediaItemSourceType.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ContentMediaItemSourceType');
    }
    return result;
  }

  static ContentMediaItemSourceType? _createOrNull(int? value) => 
      value == null ? null : ContentMediaItemSourceType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 2;
  static bool containsValue(int value) => values.containsKey(value);

  static const ContentMediaItemSourceType Video = ContentMediaItemSourceType._(0);
  static const ContentMediaItemSourceType Subtitle = ContentMediaItemSourceType._(1);
  static const ContentMediaItemSourceType Manga = ContentMediaItemSourceType._(2);
  static const Map<int, ContentMediaItemSourceType> values = {
    0: Video,
    1: Subtitle,
    2: Manga};

  static const fb.Reader<ContentMediaItemSourceType> reader = _ContentMediaItemSourceTypeReader();

  @override
  String toString() {
    return 'ContentMediaItemSourceType{value: $value}';
  }
}

class _ContentMediaItemSourceTypeReader extends fb.Reader<ContentMediaItemSourceType> {
  const _ContentMediaItemSourceTypeReader();

  @override
  int get size => 1;

  @override
  ContentMediaItemSourceType read(fb.BufferContext bc, int offset) =>
      ContentMediaItemSourceType.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class ContentInfo {
  ContentInfo._(this._bc, this._bcOffset);
  factory ContentInfo(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ContentInfo> reader = _ContentInfoReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get title => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get secondaryTitle => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get image => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'ContentInfo{id: ${id}, title: ${title}, secondaryTitle: ${secondaryTitle}, image: ${image}}';
  }

  ContentInfoT unpack() => ContentInfoT(
      id: id,
      title: title,
      secondaryTitle: secondaryTitle,
      image: image);

  static int pack(fb.Builder fbBuilder, ContentInfoT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ContentInfoT implements fb.Packable {
  String? id;
  String? title;
  String? secondaryTitle;
  String? image;

  ContentInfoT({
      this.id,
      this.title,
      this.secondaryTitle,
      this.image});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? idOffset = id == null ? null
        : fbBuilder.writeString(id!);
    final int? titleOffset = title == null ? null
        : fbBuilder.writeString(title!);
    final int? secondaryTitleOffset = secondaryTitle == null ? null
        : fbBuilder.writeString(secondaryTitle!);
    final int? imageOffset = image == null ? null
        : fbBuilder.writeString(image!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, titleOffset);
    fbBuilder.addOffset(2, secondaryTitleOffset);
    fbBuilder.addOffset(3, imageOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ContentInfoT{id: ${id}, title: ${title}, secondaryTitle: ${secondaryTitle}, image: ${image}}';
  }
}

class _ContentInfoReader extends fb.TableReader<ContentInfo> {
  const _ContentInfoReader();

  @override
  ContentInfo createObject(fb.BufferContext bc, int offset) => 
    ContentInfo._(bc, offset);
}

class ContentInfoBuilder {
  ContentInfoBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTitleOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addSecondaryTitleOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addImageOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ContentInfoObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _title;
  final String? _secondaryTitle;
  final String? _image;

  ContentInfoObjectBuilder({
    String? id,
    String? title,
    String? secondaryTitle,
    String? image,
  })
      : _id = id,
        _title = title,
        _secondaryTitle = secondaryTitle,
        _image = image;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? titleOffset = _title == null ? null
        : fbBuilder.writeString(_title!);
    final int? secondaryTitleOffset = _secondaryTitle == null ? null
        : fbBuilder.writeString(_secondaryTitle!);
    final int? imageOffset = _image == null ? null
        : fbBuilder.writeString(_image!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, titleOffset);
    fbBuilder.addOffset(2, secondaryTitleOffset);
    fbBuilder.addOffset(3, imageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ContentDetails {
  ContentDetails._(this._bc, this._bcOffset);
  factory ContentDetails(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ContentDetails> reader = _ContentDetailsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get title => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get originalTitle => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get image => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  MediaType get mediaType => MediaType.fromValue(const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 12, 0));
  List<String>? get additionalInfo => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 14);
  List<ContentInfo>? get similar => const fb.ListReader<ContentInfo>(ContentInfo.reader).vTableGetNullable(_bc, _bcOffset, 16);
  List<String>? get params => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 18);

  @override
  String toString() {
    return 'ContentDetails{title: ${title}, originalTitle: ${originalTitle}, image: ${image}, description: ${description}, mediaType: ${mediaType}, additionalInfo: ${additionalInfo}, similar: ${similar}, params: ${params}}';
  }

  ContentDetailsT unpack() => ContentDetailsT(
      title: title,
      originalTitle: originalTitle,
      image: image,
      description: description,
      mediaType: mediaType,
      additionalInfo: const fb.ListReader<String>(fb.StringReader(), lazy: false).vTableGetNullable(_bc, _bcOffset, 14),
      similar: similar?.map((e) => e.unpack()).toList(),
      params: const fb.ListReader<String>(fb.StringReader(), lazy: false).vTableGetNullable(_bc, _bcOffset, 18));

  static int pack(fb.Builder fbBuilder, ContentDetailsT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ContentDetailsT implements fb.Packable {
  String? title;
  String? originalTitle;
  String? image;
  String? description;
  MediaType mediaType;
  List<String>? additionalInfo;
  List<ContentInfoT>? similar;
  List<String>? params;

  ContentDetailsT({
      this.title,
      this.originalTitle,
      this.image,
      this.description,
      this.mediaType = MediaType.Video,
      this.additionalInfo,
      this.similar,
      this.params});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? titleOffset = title == null ? null
        : fbBuilder.writeString(title!);
    final int? originalTitleOffset = originalTitle == null ? null
        : fbBuilder.writeString(originalTitle!);
    final int? imageOffset = image == null ? null
        : fbBuilder.writeString(image!);
    final int? descriptionOffset = description == null ? null
        : fbBuilder.writeString(description!);
    final int? additionalInfoOffset = additionalInfo == null ? null
        : fbBuilder.writeList(additionalInfo!.map(fbBuilder.writeString).toList());
    final int? similarOffset = similar == null ? null
        : fbBuilder.writeList(similar!.map((b) => b.pack(fbBuilder)).toList());
    final int? paramsOffset = params == null ? null
        : fbBuilder.writeList(params!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(8);
    fbBuilder.addOffset(0, titleOffset);
    fbBuilder.addOffset(1, originalTitleOffset);
    fbBuilder.addOffset(2, imageOffset);
    fbBuilder.addOffset(3, descriptionOffset);
    fbBuilder.addUint8(4, mediaType.value);
    fbBuilder.addOffset(5, additionalInfoOffset);
    fbBuilder.addOffset(6, similarOffset);
    fbBuilder.addOffset(7, paramsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ContentDetailsT{title: ${title}, originalTitle: ${originalTitle}, image: ${image}, description: ${description}, mediaType: ${mediaType}, additionalInfo: ${additionalInfo}, similar: ${similar}, params: ${params}}';
  }
}

class _ContentDetailsReader extends fb.TableReader<ContentDetails> {
  const _ContentDetailsReader();

  @override
  ContentDetails createObject(fb.BufferContext bc, int offset) => 
    ContentDetails._(bc, offset);
}

class ContentDetailsBuilder {
  ContentDetailsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addTitleOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addOriginalTitleOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addImageOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMediaType(MediaType? mediaType) {
    fbBuilder.addUint8(4, mediaType?.value);
    return fbBuilder.offset;
  }
  int addAdditionalInfoOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSimilarOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addParamsOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ContentDetailsObjectBuilder extends fb.ObjectBuilder {
  final String? _title;
  final String? _originalTitle;
  final String? _image;
  final String? _description;
  final MediaType? _mediaType;
  final List<String>? _additionalInfo;
  final List<ContentInfoObjectBuilder>? _similar;
  final List<String>? _params;

  ContentDetailsObjectBuilder({
    String? title,
    String? originalTitle,
    String? image,
    String? description,
    MediaType? mediaType,
    List<String>? additionalInfo,
    List<ContentInfoObjectBuilder>? similar,
    List<String>? params,
  })
      : _title = title,
        _originalTitle = originalTitle,
        _image = image,
        _description = description,
        _mediaType = mediaType,
        _additionalInfo = additionalInfo,
        _similar = similar,
        _params = params;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? titleOffset = _title == null ? null
        : fbBuilder.writeString(_title!);
    final int? originalTitleOffset = _originalTitle == null ? null
        : fbBuilder.writeString(_originalTitle!);
    final int? imageOffset = _image == null ? null
        : fbBuilder.writeString(_image!);
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? additionalInfoOffset = _additionalInfo == null ? null
        : fbBuilder.writeList(_additionalInfo!.map(fbBuilder.writeString).toList());
    final int? similarOffset = _similar == null ? null
        : fbBuilder.writeList(_similar!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? paramsOffset = _params == null ? null
        : fbBuilder.writeList(_params!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(8);
    fbBuilder.addOffset(0, titleOffset);
    fbBuilder.addOffset(1, originalTitleOffset);
    fbBuilder.addOffset(2, imageOffset);
    fbBuilder.addOffset(3, descriptionOffset);
    fbBuilder.addUint8(4, _mediaType?.value);
    fbBuilder.addOffset(5, additionalInfoOffset);
    fbBuilder.addOffset(6, similarOffset);
    fbBuilder.addOffset(7, paramsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ContentMediaItem {
  ContentMediaItem._(this._bc, this._bcOffset);
  factory ContentMediaItem(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ContentMediaItem> reader = _ContentMediaItemReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get number => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String? get title => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get section => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get image => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  List<ContentMediaItemSource>? get sources => const fb.ListReader<ContentMediaItemSource>(ContentMediaItemSource.reader).vTableGetNullable(_bc, _bcOffset, 12);
  List<String>? get params => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'ContentMediaItem{number: ${number}, title: ${title}, section: ${section}, image: ${image}, sources: ${sources}, params: ${params}}';
  }

  ContentMediaItemT unpack() => ContentMediaItemT(
      number: number,
      title: title,
      section: section,
      image: image,
      sources: sources?.map((e) => e.unpack()).toList(),
      params: const fb.ListReader<String>(fb.StringReader(), lazy: false).vTableGetNullable(_bc, _bcOffset, 14));

  static int pack(fb.Builder fbBuilder, ContentMediaItemT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ContentMediaItemT implements fb.Packable {
  int number;
  String? title;
  String? section;
  String? image;
  List<ContentMediaItemSourceT>? sources;
  List<String>? params;

  ContentMediaItemT({
      this.number = 0,
      this.title,
      this.section,
      this.image,
      this.sources,
      this.params});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? titleOffset = title == null ? null
        : fbBuilder.writeString(title!);
    final int? sectionOffset = section == null ? null
        : fbBuilder.writeString(section!);
    final int? imageOffset = image == null ? null
        : fbBuilder.writeString(image!);
    final int? sourcesOffset = sources == null ? null
        : fbBuilder.writeList(sources!.map((b) => b.pack(fbBuilder)).toList());
    final int? paramsOffset = params == null ? null
        : fbBuilder.writeList(params!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(6);
    fbBuilder.addUint32(0, number);
    fbBuilder.addOffset(1, titleOffset);
    fbBuilder.addOffset(2, sectionOffset);
    fbBuilder.addOffset(3, imageOffset);
    fbBuilder.addOffset(4, sourcesOffset);
    fbBuilder.addOffset(5, paramsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ContentMediaItemT{number: ${number}, title: ${title}, section: ${section}, image: ${image}, sources: ${sources}, params: ${params}}';
  }
}

class _ContentMediaItemReader extends fb.TableReader<ContentMediaItem> {
  const _ContentMediaItemReader();

  @override
  ContentMediaItem createObject(fb.BufferContext bc, int offset) => 
    ContentMediaItem._(bc, offset);
}

class ContentMediaItemBuilder {
  ContentMediaItemBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addNumber(int? number) {
    fbBuilder.addUint32(0, number);
    return fbBuilder.offset;
  }
  int addTitleOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addSectionOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addImageOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addSourcesOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addParamsOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ContentMediaItemObjectBuilder extends fb.ObjectBuilder {
  final int? _number;
  final String? _title;
  final String? _section;
  final String? _image;
  final List<ContentMediaItemSourceObjectBuilder>? _sources;
  final List<String>? _params;

  ContentMediaItemObjectBuilder({
    int? number,
    String? title,
    String? section,
    String? image,
    List<ContentMediaItemSourceObjectBuilder>? sources,
    List<String>? params,
  })
      : _number = number,
        _title = title,
        _section = section,
        _image = image,
        _sources = sources,
        _params = params;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? titleOffset = _title == null ? null
        : fbBuilder.writeString(_title!);
    final int? sectionOffset = _section == null ? null
        : fbBuilder.writeString(_section!);
    final int? imageOffset = _image == null ? null
        : fbBuilder.writeString(_image!);
    final int? sourcesOffset = _sources == null ? null
        : fbBuilder.writeList(_sources!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? paramsOffset = _params == null ? null
        : fbBuilder.writeList(_params!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(6);
    fbBuilder.addUint32(0, _number);
    fbBuilder.addOffset(1, titleOffset);
    fbBuilder.addOffset(2, sectionOffset);
    fbBuilder.addOffset(3, imageOffset);
    fbBuilder.addOffset(4, sourcesOffset);
    fbBuilder.addOffset(5, paramsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Header {
  Header._(this._bc, this._bcOffset);
  factory Header(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Header> reader = _HeaderReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get value => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Header{name: ${name}, value: ${value}}';
  }

  HeaderT unpack() => HeaderT(
      name: name,
      value: value);

  static int pack(fb.Builder fbBuilder, HeaderT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class HeaderT implements fb.Packable {
  String? name;
  String? value;

  HeaderT({
      this.name,
      this.value});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? nameOffset = name == null ? null
        : fbBuilder.writeString(name!);
    final int? valueOffset = value == null ? null
        : fbBuilder.writeString(value!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, valueOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'HeaderT{name: ${name}, value: ${value}}';
  }
}

class _HeaderReader extends fb.TableReader<Header> {
  const _HeaderReader();

  @override
  Header createObject(fb.BufferContext bc, int offset) => 
    Header._(bc, offset);
}

class HeaderBuilder {
  HeaderBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addValueOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class HeaderObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final String? _value;

  HeaderObjectBuilder({
    String? name,
    String? value,
  })
      : _name = name,
        _value = value;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? valueOffset = _value == null ? null
        : fbBuilder.writeString(_value!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, valueOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ContentMediaItemSource {
  ContentMediaItemSource._(this._bc, this._bcOffset);
  factory ContentMediaItemSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ContentMediaItemSource> reader = _ContentMediaItemSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ContentMediaItemSourceType get type => ContentMediaItemSourceType.fromValue(const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 4, 0));
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  List<Header>? get headers => const fb.ListReader<Header>(Header.reader).vTableGetNullable(_bc, _bcOffset, 8);
  List<String>? get links => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'ContentMediaItemSource{type: ${type}, description: ${description}, headers: ${headers}, links: ${links}}';
  }

  ContentMediaItemSourceT unpack() => ContentMediaItemSourceT(
      type: type,
      description: description,
      headers: headers?.map((e) => e.unpack()).toList(),
      links: const fb.ListReader<String>(fb.StringReader(), lazy: false).vTableGetNullable(_bc, _bcOffset, 10));

  static int pack(fb.Builder fbBuilder, ContentMediaItemSourceT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ContentMediaItemSourceT implements fb.Packable {
  ContentMediaItemSourceType type;
  String? description;
  List<HeaderT>? headers;
  List<String>? links;

  ContentMediaItemSourceT({
      this.type = ContentMediaItemSourceType.Video,
      this.description,
      this.headers,
      this.links});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? descriptionOffset = description == null ? null
        : fbBuilder.writeString(description!);
    final int? headersOffset = headers == null ? null
        : fbBuilder.writeList(headers!.map((b) => b.pack(fbBuilder)).toList());
    final int? linksOffset = links == null ? null
        : fbBuilder.writeList(links!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(4);
    fbBuilder.addUint8(0, type.value);
    fbBuilder.addOffset(1, descriptionOffset);
    fbBuilder.addOffset(2, headersOffset);
    fbBuilder.addOffset(3, linksOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ContentMediaItemSourceT{type: ${type}, description: ${description}, headers: ${headers}, links: ${links}}';
  }
}

class _ContentMediaItemSourceReader extends fb.TableReader<ContentMediaItemSource> {
  const _ContentMediaItemSourceReader();

  @override
  ContentMediaItemSource createObject(fb.BufferContext bc, int offset) => 
    ContentMediaItemSource._(bc, offset);
}

class ContentMediaItemSourceBuilder {
  ContentMediaItemSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addType(ContentMediaItemSourceType? type) {
    fbBuilder.addUint8(0, type?.value);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addHeadersOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addLinksOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ContentMediaItemSourceObjectBuilder extends fb.ObjectBuilder {
  final ContentMediaItemSourceType? _type;
  final String? _description;
  final List<HeaderObjectBuilder>? _headers;
  final List<String>? _links;

  ContentMediaItemSourceObjectBuilder({
    ContentMediaItemSourceType? type,
    String? description,
    List<HeaderObjectBuilder>? headers,
    List<String>? links,
  })
      : _type = type,
        _description = description,
        _headers = headers,
        _links = links;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? headersOffset = _headers == null ? null
        : fbBuilder.writeList(_headers!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? linksOffset = _links == null ? null
        : fbBuilder.writeList(_links!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(4);
    fbBuilder.addUint8(0, _type?.value);
    fbBuilder.addOffset(1, descriptionOffset);
    fbBuilder.addOffset(2, headersOffset);
    fbBuilder.addOffset(3, linksOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SuppliersRes {
  SuppliersRes._(this._bc, this._bcOffset);
  factory SuppliersRes(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SuppliersRes> reader = _SuppliersResReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get suppliers => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'SuppliersRes{suppliers: ${suppliers}}';
  }

  SuppliersResT unpack() => SuppliersResT(
      suppliers: const fb.ListReader<String>(fb.StringReader(), lazy: false).vTableGetNullable(_bc, _bcOffset, 4));

  static int pack(fb.Builder fbBuilder, SuppliersResT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class SuppliersResT implements fb.Packable {
  List<String>? suppliers;

  SuppliersResT({
      this.suppliers});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? suppliersOffset = suppliers == null ? null
        : fbBuilder.writeList(suppliers!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, suppliersOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'SuppliersResT{suppliers: ${suppliers}}';
  }
}

class _SuppliersResReader extends fb.TableReader<SuppliersRes> {
  const _SuppliersResReader();

  @override
  SuppliersRes createObject(fb.BufferContext bc, int offset) => 
    SuppliersRes._(bc, offset);
}

class SuppliersResBuilder {
  SuppliersResBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addSuppliersOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SuppliersResObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _suppliers;

  SuppliersResObjectBuilder({
    List<String>? suppliers,
  })
      : _suppliers = suppliers;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? suppliersOffset = _suppliers == null ? null
        : fbBuilder.writeList(_suppliers!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, suppliersOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SupplierNameReq {
  SupplierNameReq._(this._bc, this._bcOffset);
  factory SupplierNameReq(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SupplierNameReq> reader = _SupplierNameReqReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get supplier => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'SupplierNameReq{supplier: ${supplier}}';
  }

  SupplierNameReqT unpack() => SupplierNameReqT(
      supplier: supplier);

  static int pack(fb.Builder fbBuilder, SupplierNameReqT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class SupplierNameReqT implements fb.Packable {
  String? supplier;

  SupplierNameReqT({
      this.supplier});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? supplierOffset = supplier == null ? null
        : fbBuilder.writeString(supplier!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, supplierOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'SupplierNameReqT{supplier: ${supplier}}';
  }
}

class _SupplierNameReqReader extends fb.TableReader<SupplierNameReq> {
  const _SupplierNameReqReader();

  @override
  SupplierNameReq createObject(fb.BufferContext bc, int offset) => 
    SupplierNameReq._(bc, offset);
}

class SupplierNameReqBuilder {
  SupplierNameReqBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addSupplierOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SupplierNameReqObjectBuilder extends fb.ObjectBuilder {
  final String? _supplier;

  SupplierNameReqObjectBuilder({
    String? supplier,
  })
      : _supplier = supplier;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? supplierOffset = _supplier == null ? null
        : fbBuilder.writeString(_supplier!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, supplierOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ChannelsRes {
  ChannelsRes._(this._bc, this._bcOffset);
  factory ChannelsRes(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ChannelsRes> reader = _ChannelsResReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get channels => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ChannelsRes{channels: ${channels}}';
  }

  ChannelsResT unpack() => ChannelsResT(
      channels: const fb.ListReader<String>(fb.StringReader(), lazy: false).vTableGetNullable(_bc, _bcOffset, 4));

  static int pack(fb.Builder fbBuilder, ChannelsResT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ChannelsResT implements fb.Packable {
  List<String>? channels;

  ChannelsResT({
      this.channels});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? channelsOffset = channels == null ? null
        : fbBuilder.writeList(channels!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, channelsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ChannelsResT{channels: ${channels}}';
  }
}

class _ChannelsResReader extends fb.TableReader<ChannelsRes> {
  const _ChannelsResReader();

  @override
  ChannelsRes createObject(fb.BufferContext bc, int offset) => 
    ChannelsRes._(bc, offset);
}

class ChannelsResBuilder {
  ChannelsResBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addChannelsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ChannelsResObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _channels;

  ChannelsResObjectBuilder({
    List<String>? channels,
  })
      : _channels = channels;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? channelsOffset = _channels == null ? null
        : fbBuilder.writeList(_channels!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, channelsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SupportedTypesRes {
  SupportedTypesRes._(this._bc, this._bcOffset);
  factory SupportedTypesRes(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SupportedTypesRes> reader = _SupportedTypesResReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<ContentType>? get types => const fb.ListReader<ContentType>(ContentType.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'SupportedTypesRes{types: ${types}}';
  }

  SupportedTypesResT unpack() => SupportedTypesResT(
      types: const fb.ListReader<ContentType>(ContentType.reader, lazy: false).vTableGetNullable(_bc, _bcOffset, 4));

  static int pack(fb.Builder fbBuilder, SupportedTypesResT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class SupportedTypesResT implements fb.Packable {
  List<ContentType>? types;

  SupportedTypesResT({
      this.types});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? typesOffset = types == null ? null
        : fbBuilder.writeListUint8(types!.map((f) => f.value).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, typesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'SupportedTypesResT{types: ${types}}';
  }
}

class _SupportedTypesResReader extends fb.TableReader<SupportedTypesRes> {
  const _SupportedTypesResReader();

  @override
  SupportedTypesRes createObject(fb.BufferContext bc, int offset) => 
    SupportedTypesRes._(bc, offset);
}

class SupportedTypesResBuilder {
  SupportedTypesResBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addTypesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SupportedTypesResObjectBuilder extends fb.ObjectBuilder {
  final List<ContentType>? _types;

  SupportedTypesResObjectBuilder({
    List<ContentType>? types,
  })
      : _types = types;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typesOffset = _types == null ? null
        : fbBuilder.writeListUint8(_types!.map((f) => f.value).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, typesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SupportedLanuagesRes {
  SupportedLanuagesRes._(this._bc, this._bcOffset);
  factory SupportedLanuagesRes(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SupportedLanuagesRes> reader = _SupportedLanuagesResReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get langs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'SupportedLanuagesRes{langs: ${langs}}';
  }

  SupportedLanuagesResT unpack() => SupportedLanuagesResT(
      langs: const fb.ListReader<String>(fb.StringReader(), lazy: false).vTableGetNullable(_bc, _bcOffset, 4));

  static int pack(fb.Builder fbBuilder, SupportedLanuagesResT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class SupportedLanuagesResT implements fb.Packable {
  List<String>? langs;

  SupportedLanuagesResT({
      this.langs});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? langsOffset = langs == null ? null
        : fbBuilder.writeList(langs!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, langsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'SupportedLanuagesResT{langs: ${langs}}';
  }
}

class _SupportedLanuagesResReader extends fb.TableReader<SupportedLanuagesRes> {
  const _SupportedLanuagesResReader();

  @override
  SupportedLanuagesRes createObject(fb.BufferContext bc, int offset) => 
    SupportedLanuagesRes._(bc, offset);
}

class SupportedLanuagesResBuilder {
  SupportedLanuagesResBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addLangsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SupportedLanuagesResObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _langs;

  SupportedLanuagesResObjectBuilder({
    List<String>? langs,
  })
      : _langs = langs;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? langsOffset = _langs == null ? null
        : fbBuilder.writeList(_langs!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, langsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class LoadChannelsReq {
  LoadChannelsReq._(this._bc, this._bcOffset);
  factory LoadChannelsReq(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LoadChannelsReq> reader = _LoadChannelsReqReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get supplier => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get channel => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get page => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 8, 0);

  @override
  String toString() {
    return 'LoadChannelsReq{supplier: ${supplier}, channel: ${channel}, page: ${page}}';
  }

  LoadChannelsReqT unpack() => LoadChannelsReqT(
      supplier: supplier,
      channel: channel,
      page: page);

  static int pack(fb.Builder fbBuilder, LoadChannelsReqT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class LoadChannelsReqT implements fb.Packable {
  String? supplier;
  String? channel;
  int page;

  LoadChannelsReqT({
      this.supplier,
      this.channel,
      this.page = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? supplierOffset = supplier == null ? null
        : fbBuilder.writeString(supplier!);
    final int? channelOffset = channel == null ? null
        : fbBuilder.writeString(channel!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, supplierOffset);
    fbBuilder.addOffset(1, channelOffset);
    fbBuilder.addUint32(2, page);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'LoadChannelsReqT{supplier: ${supplier}, channel: ${channel}, page: ${page}}';
  }
}

class _LoadChannelsReqReader extends fb.TableReader<LoadChannelsReq> {
  const _LoadChannelsReqReader();

  @override
  LoadChannelsReq createObject(fb.BufferContext bc, int offset) => 
    LoadChannelsReq._(bc, offset);
}

class LoadChannelsReqBuilder {
  LoadChannelsReqBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addSupplierOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addChannelOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addPage(int? page) {
    fbBuilder.addUint32(2, page);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LoadChannelsReqObjectBuilder extends fb.ObjectBuilder {
  final String? _supplier;
  final String? _channel;
  final int? _page;

  LoadChannelsReqObjectBuilder({
    String? supplier,
    String? channel,
    int? page,
  })
      : _supplier = supplier,
        _channel = channel,
        _page = page;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? supplierOffset = _supplier == null ? null
        : fbBuilder.writeString(_supplier!);
    final int? channelOffset = _channel == null ? null
        : fbBuilder.writeString(_channel!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, supplierOffset);
    fbBuilder.addOffset(1, channelOffset);
    fbBuilder.addUint32(2, _page);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SearchReq {
  SearchReq._(this._bc, this._bcOffset);
  factory SearchReq(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SearchReq> reader = _SearchReqReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get supplier => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get query => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  List<ContentType>? get types => const fb.ListReader<ContentType>(ContentType.reader).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'SearchReq{supplier: ${supplier}, query: ${query}, types: ${types}}';
  }

  SearchReqT unpack() => SearchReqT(
      supplier: supplier,
      query: query,
      types: const fb.ListReader<ContentType>(ContentType.reader, lazy: false).vTableGetNullable(_bc, _bcOffset, 8));

  static int pack(fb.Builder fbBuilder, SearchReqT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class SearchReqT implements fb.Packable {
  String? supplier;
  String? query;
  List<ContentType>? types;

  SearchReqT({
      this.supplier,
      this.query,
      this.types});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? supplierOffset = supplier == null ? null
        : fbBuilder.writeString(supplier!);
    final int? queryOffset = query == null ? null
        : fbBuilder.writeString(query!);
    final int? typesOffset = types == null ? null
        : fbBuilder.writeListUint8(types!.map((f) => f.value).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, supplierOffset);
    fbBuilder.addOffset(1, queryOffset);
    fbBuilder.addOffset(2, typesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'SearchReqT{supplier: ${supplier}, query: ${query}, types: ${types}}';
  }
}

class _SearchReqReader extends fb.TableReader<SearchReq> {
  const _SearchReqReader();

  @override
  SearchReq createObject(fb.BufferContext bc, int offset) => 
    SearchReq._(bc, offset);
}

class SearchReqBuilder {
  SearchReqBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addSupplierOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addQueryOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTypesOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SearchReqObjectBuilder extends fb.ObjectBuilder {
  final String? _supplier;
  final String? _query;
  final List<ContentType>? _types;

  SearchReqObjectBuilder({
    String? supplier,
    String? query,
    List<ContentType>? types,
  })
      : _supplier = supplier,
        _query = query,
        _types = types;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? supplierOffset = _supplier == null ? null
        : fbBuilder.writeString(_supplier!);
    final int? queryOffset = _query == null ? null
        : fbBuilder.writeString(_query!);
    final int? typesOffset = _types == null ? null
        : fbBuilder.writeListUint8(_types!.map((f) => f.value).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, supplierOffset);
    fbBuilder.addOffset(1, queryOffset);
    fbBuilder.addOffset(2, typesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ContentInfoRes {
  ContentInfoRes._(this._bc, this._bcOffset);
  factory ContentInfoRes(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ContentInfoRes> reader = _ContentInfoResReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<ContentInfo>? get items => const fb.ListReader<ContentInfo>(ContentInfo.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ContentInfoRes{items: ${items}}';
  }

  ContentInfoResT unpack() => ContentInfoResT(
      items: items?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, ContentInfoResT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ContentInfoResT implements fb.Packable {
  List<ContentInfoT>? items;

  ContentInfoResT({
      this.items});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? itemsOffset = items == null ? null
        : fbBuilder.writeList(items!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, itemsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ContentInfoResT{items: ${items}}';
  }
}

class _ContentInfoResReader extends fb.TableReader<ContentInfoRes> {
  const _ContentInfoResReader();

  @override
  ContentInfoRes createObject(fb.BufferContext bc, int offset) => 
    ContentInfoRes._(bc, offset);
}

class ContentInfoResBuilder {
  ContentInfoResBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ContentInfoResObjectBuilder extends fb.ObjectBuilder {
  final List<ContentInfoObjectBuilder>? _items;

  ContentInfoResObjectBuilder({
    List<ContentInfoObjectBuilder>? items,
  })
      : _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ContentDetailsReq {
  ContentDetailsReq._(this._bc, this._bcOffset);
  factory ContentDetailsReq(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ContentDetailsReq> reader = _ContentDetailsReqReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get supplier => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ContentDetailsReq{supplier: ${supplier}, id: ${id}}';
  }

  ContentDetailsReqT unpack() => ContentDetailsReqT(
      supplier: supplier,
      id: id);

  static int pack(fb.Builder fbBuilder, ContentDetailsReqT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ContentDetailsReqT implements fb.Packable {
  String? supplier;
  String? id;

  ContentDetailsReqT({
      this.supplier,
      this.id});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? supplierOffset = supplier == null ? null
        : fbBuilder.writeString(supplier!);
    final int? idOffset = id == null ? null
        : fbBuilder.writeString(id!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, supplierOffset);
    fbBuilder.addOffset(1, idOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ContentDetailsReqT{supplier: ${supplier}, id: ${id}}';
  }
}

class _ContentDetailsReqReader extends fb.TableReader<ContentDetailsReq> {
  const _ContentDetailsReqReader();

  @override
  ContentDetailsReq createObject(fb.BufferContext bc, int offset) => 
    ContentDetailsReq._(bc, offset);
}

class ContentDetailsReqBuilder {
  ContentDetailsReqBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addSupplierOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ContentDetailsReqObjectBuilder extends fb.ObjectBuilder {
  final String? _supplier;
  final String? _id;

  ContentDetailsReqObjectBuilder({
    String? supplier,
    String? id,
  })
      : _supplier = supplier,
        _id = id;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? supplierOffset = _supplier == null ? null
        : fbBuilder.writeString(_supplier!);
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, supplierOffset);
    fbBuilder.addOffset(1, idOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ContentDetailsRes {
  ContentDetailsRes._(this._bc, this._bcOffset);
  factory ContentDetailsRes(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ContentDetailsRes> reader = _ContentDetailsResReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ContentDetails? get details => ContentDetails.reader.vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ContentDetailsRes{details: ${details}}';
  }

  ContentDetailsResT unpack() => ContentDetailsResT(
      details: details?.unpack());

  static int pack(fb.Builder fbBuilder, ContentDetailsResT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ContentDetailsResT implements fb.Packable {
  ContentDetailsT? details;

  ContentDetailsResT({
      this.details});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? detailsOffset = details?.pack(fbBuilder);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, detailsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ContentDetailsResT{details: ${details}}';
  }
}

class _ContentDetailsResReader extends fb.TableReader<ContentDetailsRes> {
  const _ContentDetailsResReader();

  @override
  ContentDetailsRes createObject(fb.BufferContext bc, int offset) => 
    ContentDetailsRes._(bc, offset);
}

class ContentDetailsResBuilder {
  ContentDetailsResBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addDetailsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ContentDetailsResObjectBuilder extends fb.ObjectBuilder {
  final ContentDetailsObjectBuilder? _details;

  ContentDetailsResObjectBuilder({
    ContentDetailsObjectBuilder? details,
  })
      : _details = details;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? detailsOffset = _details?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, detailsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class LoadMediaItemsReq {
  LoadMediaItemsReq._(this._bc, this._bcOffset);
  factory LoadMediaItemsReq(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LoadMediaItemsReq> reader = _LoadMediaItemsReqReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get supplier => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  List<String>? get params => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'LoadMediaItemsReq{supplier: ${supplier}, id: ${id}, params: ${params}}';
  }

  LoadMediaItemsReqT unpack() => LoadMediaItemsReqT(
      supplier: supplier,
      id: id,
      params: const fb.ListReader<String>(fb.StringReader(), lazy: false).vTableGetNullable(_bc, _bcOffset, 8));

  static int pack(fb.Builder fbBuilder, LoadMediaItemsReqT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class LoadMediaItemsReqT implements fb.Packable {
  String? supplier;
  String? id;
  List<String>? params;

  LoadMediaItemsReqT({
      this.supplier,
      this.id,
      this.params});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? supplierOffset = supplier == null ? null
        : fbBuilder.writeString(supplier!);
    final int? idOffset = id == null ? null
        : fbBuilder.writeString(id!);
    final int? paramsOffset = params == null ? null
        : fbBuilder.writeList(params!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, supplierOffset);
    fbBuilder.addOffset(1, idOffset);
    fbBuilder.addOffset(2, paramsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'LoadMediaItemsReqT{supplier: ${supplier}, id: ${id}, params: ${params}}';
  }
}

class _LoadMediaItemsReqReader extends fb.TableReader<LoadMediaItemsReq> {
  const _LoadMediaItemsReqReader();

  @override
  LoadMediaItemsReq createObject(fb.BufferContext bc, int offset) => 
    LoadMediaItemsReq._(bc, offset);
}

class LoadMediaItemsReqBuilder {
  LoadMediaItemsReqBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addSupplierOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addParamsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LoadMediaItemsReqObjectBuilder extends fb.ObjectBuilder {
  final String? _supplier;
  final String? _id;
  final List<String>? _params;

  LoadMediaItemsReqObjectBuilder({
    String? supplier,
    String? id,
    List<String>? params,
  })
      : _supplier = supplier,
        _id = id,
        _params = params;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? supplierOffset = _supplier == null ? null
        : fbBuilder.writeString(_supplier!);
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? paramsOffset = _params == null ? null
        : fbBuilder.writeList(_params!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, supplierOffset);
    fbBuilder.addOffset(1, idOffset);
    fbBuilder.addOffset(2, paramsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class LoadMediaItemsRes {
  LoadMediaItemsRes._(this._bc, this._bcOffset);
  factory LoadMediaItemsRes(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LoadMediaItemsRes> reader = _LoadMediaItemsResReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<ContentMediaItem>? get mediaItems => const fb.ListReader<ContentMediaItem>(ContentMediaItem.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'LoadMediaItemsRes{mediaItems: ${mediaItems}}';
  }

  LoadMediaItemsResT unpack() => LoadMediaItemsResT(
      mediaItems: mediaItems?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, LoadMediaItemsResT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class LoadMediaItemsResT implements fb.Packable {
  List<ContentMediaItemT>? mediaItems;

  LoadMediaItemsResT({
      this.mediaItems});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? mediaItemsOffset = mediaItems == null ? null
        : fbBuilder.writeList(mediaItems!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, mediaItemsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'LoadMediaItemsResT{mediaItems: ${mediaItems}}';
  }
}

class _LoadMediaItemsResReader extends fb.TableReader<LoadMediaItemsRes> {
  const _LoadMediaItemsResReader();

  @override
  LoadMediaItemsRes createObject(fb.BufferContext bc, int offset) => 
    LoadMediaItemsRes._(bc, offset);
}

class LoadMediaItemsResBuilder {
  LoadMediaItemsResBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addMediaItemsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LoadMediaItemsResObjectBuilder extends fb.ObjectBuilder {
  final List<ContentMediaItemObjectBuilder>? _mediaItems;

  LoadMediaItemsResObjectBuilder({
    List<ContentMediaItemObjectBuilder>? mediaItems,
  })
      : _mediaItems = mediaItems;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? mediaItemsOffset = _mediaItems == null ? null
        : fbBuilder.writeList(_mediaItems!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, mediaItemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class LoadMediaItemSourcesReq {
  LoadMediaItemSourcesReq._(this._bc, this._bcOffset);
  factory LoadMediaItemSourcesReq(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LoadMediaItemSourcesReq> reader = _LoadMediaItemSourcesReqReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get supplier => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  List<String>? get params => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'LoadMediaItemSourcesReq{supplier: ${supplier}, id: ${id}, params: ${params}}';
  }

  LoadMediaItemSourcesReqT unpack() => LoadMediaItemSourcesReqT(
      supplier: supplier,
      id: id,
      params: const fb.ListReader<String>(fb.StringReader(), lazy: false).vTableGetNullable(_bc, _bcOffset, 8));

  static int pack(fb.Builder fbBuilder, LoadMediaItemSourcesReqT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class LoadMediaItemSourcesReqT implements fb.Packable {
  String? supplier;
  String? id;
  List<String>? params;

  LoadMediaItemSourcesReqT({
      this.supplier,
      this.id,
      this.params});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? supplierOffset = supplier == null ? null
        : fbBuilder.writeString(supplier!);
    final int? idOffset = id == null ? null
        : fbBuilder.writeString(id!);
    final int? paramsOffset = params == null ? null
        : fbBuilder.writeList(params!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, supplierOffset);
    fbBuilder.addOffset(1, idOffset);
    fbBuilder.addOffset(2, paramsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'LoadMediaItemSourcesReqT{supplier: ${supplier}, id: ${id}, params: ${params}}';
  }
}

class _LoadMediaItemSourcesReqReader extends fb.TableReader<LoadMediaItemSourcesReq> {
  const _LoadMediaItemSourcesReqReader();

  @override
  LoadMediaItemSourcesReq createObject(fb.BufferContext bc, int offset) => 
    LoadMediaItemSourcesReq._(bc, offset);
}

class LoadMediaItemSourcesReqBuilder {
  LoadMediaItemSourcesReqBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addSupplierOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addParamsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LoadMediaItemSourcesReqObjectBuilder extends fb.ObjectBuilder {
  final String? _supplier;
  final String? _id;
  final List<String>? _params;

  LoadMediaItemSourcesReqObjectBuilder({
    String? supplier,
    String? id,
    List<String>? params,
  })
      : _supplier = supplier,
        _id = id,
        _params = params;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? supplierOffset = _supplier == null ? null
        : fbBuilder.writeString(_supplier!);
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? paramsOffset = _params == null ? null
        : fbBuilder.writeList(_params!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, supplierOffset);
    fbBuilder.addOffset(1, idOffset);
    fbBuilder.addOffset(2, paramsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class LoadMediaItemSourcesRes {
  LoadMediaItemSourcesRes._(this._bc, this._bcOffset);
  factory LoadMediaItemSourcesRes(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LoadMediaItemSourcesRes> reader = _LoadMediaItemSourcesResReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<ContentMediaItemSource>? get sources => const fb.ListReader<ContentMediaItemSource>(ContentMediaItemSource.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'LoadMediaItemSourcesRes{sources: ${sources}}';
  }

  LoadMediaItemSourcesResT unpack() => LoadMediaItemSourcesResT(
      sources: sources?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, LoadMediaItemSourcesResT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class LoadMediaItemSourcesResT implements fb.Packable {
  List<ContentMediaItemSourceT>? sources;

  LoadMediaItemSourcesResT({
      this.sources});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? sourcesOffset = sources == null ? null
        : fbBuilder.writeList(sources!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, sourcesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'LoadMediaItemSourcesResT{sources: ${sources}}';
  }
}

class _LoadMediaItemSourcesResReader extends fb.TableReader<LoadMediaItemSourcesRes> {
  const _LoadMediaItemSourcesResReader();

  @override
  LoadMediaItemSourcesRes createObject(fb.BufferContext bc, int offset) => 
    LoadMediaItemSourcesRes._(bc, offset);
}

class LoadMediaItemSourcesResBuilder {
  LoadMediaItemSourcesResBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addSourcesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LoadMediaItemSourcesResObjectBuilder extends fb.ObjectBuilder {
  final List<ContentMediaItemSourceObjectBuilder>? _sources;

  LoadMediaItemSourcesResObjectBuilder({
    List<ContentMediaItemSourceObjectBuilder>? sources,
  })
      : _sources = sources;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? sourcesOffset = _sources == null ? null
        : fbBuilder.writeList(_sources!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, sourcesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
