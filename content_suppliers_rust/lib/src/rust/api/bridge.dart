// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'models.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

List<String> avalaibleSuppliers() =>
    RustLib.instance.api.crateApiBridgeAvalaibleSuppliers();

class Bridge {
  final String name;

  const Bridge({
    required this.name,
  });

  List<String> getChannels() =>
      RustLib.instance.api.crateApiBridgeBridgeGetChannels(
        that: this,
      );

  Future<ContentDetails?> getContentDetails({required String id}) =>
      RustLib.instance.api
          .crateApiBridgeBridgeGetContentDetails(that: this, id: id);

  List<String> getDefaultChannels() =>
      RustLib.instance.api.crateApiBridgeBridgeGetDefaultChannels(
        that: this,
      );

  String getName() => RustLib.instance.api.crateApiBridgeBridgeGetName(
        that: this,
      );

  List<String> getSupportedLanguages() =>
      RustLib.instance.api.crateApiBridgeBridgeGetSupportedLanguages(
        that: this,
      );

  List<ContentType> getSupportedTypes() =>
      RustLib.instance.api.crateApiBridgeBridgeGetSupportedTypes(
        that: this,
      );

  Future<List<ContentInfo>> loadChannel(
          {required String channel, required int page}) =>
      RustLib.instance.api.crateApiBridgeBridgeLoadChannel(
          that: this, channel: channel, page: page);

  Future<List<ContentMediaItemSource>> loadMediaItemSources(
          {required String id, required List<String> params}) =>
      RustLib.instance.api.crateApiBridgeBridgeLoadMediaItemSources(
          that: this, id: id, params: params);

  Future<List<ContentMediaItem>> loadMediaItems(
          {required String id, required List<String> params}) =>
      RustLib.instance.api.crateApiBridgeBridgeLoadMediaItems(
          that: this, id: id, params: params);

  Future<List<ContentInfo>> search(
          {required String query, required List<String> types}) =>
      RustLib.instance.api
          .crateApiBridgeBridgeSearch(that: this, query: query, types: types);

  @override
  int get hashCode => name.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Bridge && runtimeType == other.runtimeType && name == other.name;
}
